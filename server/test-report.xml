<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\dao.test.js">
    <testCase name="Test suite DAO the creation of a new booking fails because id client is missing" duration="329"/>
    <testCase name="Test suite DAO the creation of a new booking fails because state is missing" duration="12"/>
    <testCase name="Test suite DAO the creation of a new booking is done" duration="31"/>
    <testCase name="Test suite DAO the creation of a new client fails because email is missing" duration="113"/>
    <testCase name="Test suite DAO the creation of a new client fails because name is missing" duration="142"/>
    <testCase name="Test suite DAO the creation of a new client fails because surname is missing" duration="92"/>
    <testCase name="Test suite DAO the creation of a new client fails because password is missing" duration="13"/>
    <testCase name="Test suite DAO the creation of a new client is done" duration="102"/>
    <testCase name="Test suite DAO get client return false because no email provided" duration="33"/>
    <testCase name="Test suite DAO get client return false because no user with that email exists" duration="15"/>
    <testCase name="Test suite DAO get client return false because wrong password" duration="179"/>
    <testCase name="Test suite DAO get client return success" duration="112"/>
    <testCase name="Test suite DAO get client return -1 because no email provided" duration="13"/>
    <testCase name="Test suite DAO get client return -1 because no user with that email exists" duration="11"/>
    <testCase name="Test suite DAO get client return success" duration="12"/>
    <testCase name="Test suite DAO get client return success" duration="13"/>
    <testCase name="Test suite DAO get clients preparation return success" duration="14"/>
    <testCase name="Test suite DAO get categories return success" duration="13"/>
    <testCase name="Test suite DAO get client by id return false because no user with that id exists" duration="13"/>
    <testCase name="Test suite DAO get client by id return success" duration="12"/>
    <testCase name="Test suite DAO get products expected by farmer id return empty array because no farmer with that id exists" duration="14"/>
    <testCase name="Test suite DAO get products expected by farmer return success" duration="14"/>
    <testCase name="Test suite DAO get farmer return false because no email provided" duration="14"/>
    <testCase name="Test suite DAO get farmer return false because no user with that email exists" duration="12"/>
    <testCase name="Test suite DAO get farmer return false because wrong psw" duration="93"/>
    <testCase name="Test suite DAO get farmer return success" duration="91"/>
    <testCase name="Test suite DAO get farmer by id return false because no farmer with that id exists" duration="13"/>
    <testCase name="Test suite DAO get farmer by id return a farmer" duration="13"/>
    <testCase name="Test suite DAO get shop employee return false because no email provided" duration="14"/>
    <testCase name="Test suite DAO get shop employee return false because no user with that email exists" duration="3"/>
    <testCase name="Test suite DAO get shop employee return false because wrong psw" duration="124"/>
    <testCase name="Test suite DAO get shop employee return success" duration="101"/>
    <testCase name="Test suite DAO get shop employee by id return false because no shop employee with that id exists" duration="23"/>
    <testCase name="Test suite DAO get shop employee by id return a shop employee" duration="13"/>
    <testCase name="Test suite DAO get warehouse worker by id return false because no shop worker with that id exists" duration="14"/>
    <testCase name="Test suite DAO get shop employee by id return a warehouse worker" duration="12"/>
    <testCase name="Test suite DAO get warehouse worker return false because no email provided" duration="12"/>
    <testCase name="Test suite DAO get warehouse worker return false because no user with that email exists" duration="12"/>
    <testCase name="Test suite DAO get warehouse worker return false because wrong psw" duration="117"/>
    <testCase name="Test suite DAO get warehouse worker return success" duration="147"/>
    <testCase name="get all products success" duration="14"/>
    <testCase name="get all all CONFIRMED products for a particular farmer success" duration="1">
      <failure message="TypeError: dao.getAllConfirmedProductsForFarmer is not a function"><![CDATA[TypeError: dao.getAllConfirmedProductsForFarmer is not a function
    at Object.<anonymous> (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\dao.test.js:381:21)
    at Promise.then.completed (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\utils.js:390:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\utils.js:315:10)
    at _callCircusTest (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:218:40)
    at _runTest (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:155:3)
    at _runTestsForDescribeBlock (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:66:9)
    at run (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:25:3)
    at runAndTransformResultsToJestFormat (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:167:21)
    at jestAdapter (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:82:19)]]></failure>
    </testCase>
    <testCase name="get all bookings success" duration="2"/>
    <testCase name="get all bookings for a client success" duration="2"/>
    <testCase name="get all bookings for a non-existing client success" duration="1"/>
    <testCase name="the creation of a new booking mode success" duration="4">
      <failure message="Error: expect(received).resolves.toBeGreaterThanOrEqual()"><![CDATA[Error: expect(received).resolves.toBeGreaterThanOrEqual()

Received promise rejected instead of resolved
Rejected to value: [Error: SQLITE_CONSTRAINT: NOT NULL constraint failed: BOOKING_MODE.STATE]
    at expect (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\expect\build\index.js:178:15)
    at Object.<anonymous> (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\dao.test.js:453:10)
    at Promise.then.completed (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\utils.js:390:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\utils.js:315:10)
    at _callCircusTest (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:218:40)
    at _runTest (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:155:3)
    at _runTestsForDescribeBlock (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:66:9)
    at run (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:25:3)
    at runAndTransformResultsToJestFormat (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:167:21)]]></failure>
    </testCase>
    <testCase name="updating the wallet failed bacause client was not found" duration="1"/>
    <testCase name="updating the wallet failed bacause client id was not provided" duration="1"/>
    <testCase name="update of wallet balance was successfull" duration="12"/>
    <testCase name="Creation of wallet with balance= 0.0 was successfull" duration="14"/>
    <testCase name="Creation of wallet fails,id 1 already exists" duration="2"/>
    <testCase name="Edit the state of a booking with a valid request" duration="1"/>
    <testCase name="create a row in the booking product table" duration="17"/>
    <testCase name="get all bookings with pendingcancelation state" duration="55"/>
    <testCase name="Insert a new Product expected without a field category" duration="79"/>
    <testCase name="INSERT into Product_WEEK by receiving a product confirmed by farmer with state = CONFIRMED success" duration="12"/>
    <testCase name="edit state of a product receiving an array with id-state" duration="2"/>
    <testCase name="get all acks with NEW state success" duration="2"/>
    <testCase name="the creation of ack success" duration="49"/>
  </file>
  <file path="C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\serverIntegration.test.js">
    <testCase name="Test suite Integration Server Post booking fail create a new booking fails due to idClient = 0" duration="187"/>
    <testCase name="Test suite Integration Server Post booking fail create a new booking fails due to idClient = -1" duration="22"/>
    <testCase name="Test suite Integration Server Post booking success should create a new booking" duration="23"/>
    <testCase name="Test suite Integration Server Post booking mode success should create a new booking mode" duration="37">
      <failure message="Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client"><![CDATA[Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    at ServerResponse.setHeader (_http_outgoing.js:558:11)
    at ServerResponse.header (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\express\lib\response.js:771:10)
    at ServerResponse.send (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\express\lib\response.js:170:12)
    at ServerResponse.json (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\node_modules\express\lib\response.js:267:15)
    at C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\server.js:985:19]]></failure>
      <failure message="Error: expect(received).toEqual(expected) // deep equality"><![CDATA[Error: expect(received).toEqual(expected) // deep equality

Expected: 201
Received: 503
    at Object.<anonymous> (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\serverIntegration.test.js:78:30)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testCase>
    <testCase name="Test suite Integration Server Post new client fail create a new client fails due to invalid email" duration="27"/>
    <testCase name="Test suite Integration Server Post new client fail create a new client fails due to invalid name" duration="30"/>
    <testCase name="Test suite Integration Server Post new client fail create a new client fails due to invalid surname" duration="16"/>
    <testCase name="Test suite Integration Server Post new client fail create a new client fails due to invalid password" duration="17"/>
    <testCase name="Test suite Integration Server Post new client success create a new client success" duration="162"/>
    <testCase name="Test suite Integration Server Get a wallet fail send a invalid id of client" duration="45"/>
    <testCase name="Test suite Integration Server Put a qty of a product send a invalid qty" duration="36"/>
    <testCase name="Test suite Integration Server Put a qty of a product send a invalid id product" duration="12"/>
    <testCase name="Test suite Integration Server Put a row in the table BOOKING_PRODUCTS send a invalid Booking id" duration="104"/>
    <testCase name="Test suite Integration Server Put a row in the table BOOKING_PRODUCTS send a invalid product id" duration="17"/>
    <testCase name="Test suite Integration Server Put a row in the table BOOKING_PRODUCTS send a invalid qty" duration="22"/>
    <testCase name="Test suite Integration Server Client Session success send a valid user" duration="173"/>
    <testCase name="Test suite Integration Server Client Session fails send a wrong psw" duration="110"/>
    <testCase name="Test suite Integration Server Get client by email success send a valid email" duration="16"/>
    <testCase name="Test suite Integration Server Get client by email fails don&apos;t send an email" duration="22"/>
    <testCase name="Test suite Integration Server Get client by email fails send a wrong email" duration="16"/>
    <testCase name="Test suite Integration Server Get clients success ask the list of clients" duration="15"/>
    <testCase name="Test suite Integration Server Get categories success ask the list of categories" duration="15"/>
    <testCase name="Test suite Integration Server Farmer Session success send a valid user" duration="94"/>
    <testCase name="Test suite Integration Server Farmer Session fails send a wrong psw" duration="88"/>
    <testCase name="Test suite Integration Server Shop Employee Session success send a valid user" duration="94"/>
    <testCase name="Test suite Integration Server Shop Employee Session fails send a wrong psw" duration="88"/>
    <testCase name="Test suite Integration Server Warehouse worker Session success send a valid user" duration="97"/>
    <testCase name="Test suite Integration Server Warehouse worker Session fails send a wrong psw" duration="87"/>
    <testCase name="Test suite Integration Server get all products success test get api/products endpoint" duration="16"/>
    <testCase name="Test suite Integration Server get all CONFIRMED products for a particular farmer success test //GET /api/products/farmers/:id success" duration="29">
      <failure message="Error: expect(received).toEqual(expected) // deep equality"><![CDATA[Error: expect(received).toEqual(expected) // deep equality

- Expected  - 0
+ Received  + 8

@@ -1,9 +1,17 @@
  Array [
    Object {
      "category": "Fruit",
      "farmer_email": "antonio.bianchi@mail.it",
+     "id": 1,
+     "name": "Mele",
+     "price": 14,
+     "qty": 5,
+   },
+   Object {
+     "category": "Fruit",
+     "farmer_email": "antonio.bianchi@mail.it",
      "id": 2,
      "name": "Lamponi",
      "price": 1.78,
      "qty": 1,
    },
    at Object.<anonymous> (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\serverIntegration.test.js:453:29)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testCase>
    <testCase name="Test suite Integration Server get all products expected by farmer id success test get /api/farmers/:farmerid/products_expected endpoint" duration="15"/>
    <testCase name="Test suite Integration Server get all confirmed products expected by farmer id success test get /api/products/farmers/1 endpoint" duration="16">
      <failure message="Error: expect(received).toEqual(expected) // deep equality"><![CDATA[Error: expect(received).toEqual(expected) // deep equality

- Expected  - 0
+ Received  + 8

@@ -1,9 +1,17 @@
  Array [
    Object {
      "category": "Fruit",
      "farmer_email": "antonio.bianchi@mail.it",
+     "id": 1,
+     "name": "Mele",
+     "price": 14,
+     "qty": 5,
+   },
+   Object {
+     "category": "Fruit",
+     "farmer_email": "antonio.bianchi@mail.it",
      "id": 2,
      "name": "Lamponi",
      "price": 1.78,
      "qty": 1,
    },
    at Object.<anonymous> (C:\Users\rocco\AppData\Roaming\SPB_Data\git\SPG-P08\SoftEngII-P08-SPG\server\serverIntegration.test.js:494:29)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testCase>
    <testCase name="Test suite Integration Server get all bookings success test get api/bookings endpoint" duration="26"/>
    <testCase name="Test suite Integration Server get all bookings for a client success test get api/bookings/clients/1 endpoint" duration="23"/>
    <testCase name="Test suite Integration Server get all bookings for a non-existing client success test get api/bookings/clients/100 endpoint" duration="23"/>
    <testCase name="Test suite Integration Server update wallet balance fails send a negative balance amount" duration="23"/>
    <testCase name="Test suite Integration Server update wallet balance fails send a client id which does not exist" duration="15"/>
    <testCase name="Test suite Integration Server update wallet balance fails  do not send a client id " duration="38"/>
    <testCase name="Test suite Integration Server update wallet balance success send a valid body" duration="37"/>
    <testCase name="Test suite Integration Server edit the state of a booking send a invalid id booking" duration="17"/>
    <testCase name="Test suite Integration Server edit the state of a booking send a valid body" duration="18"/>
    <testCase name="Test suite Integration Server get all bookings with PENDINGCANCELATION state test /api/bookingsPendingCancelation endpoint" duration="17"/>
    <testCase name="Test suite Integration Server post a vector of product expected test with a no valid body, without a name field" duration="15"/>
    <testCase name="Test suite Integration Server Post ack success should create a new ack" duration="24"/>
    <testCase name="Test suite Integration Server get acks with state NEW success should retrieve a list of acks with state NEW" duration="42"/>
    <testCase name="Test suite Integration Server Put products with new state right put with all right fields" duration="20"/>
    <testCase name="Test suite Integration Server Put products with new state wrong put with a element without id field" duration="15"/>
    <testCase name="Test suite Integration Server Put products with new state wrong put with a invalid id" duration="13"/>
  </file>
</testExecutions>