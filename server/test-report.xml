<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\dao.test.js">
    <testCase name="Test suite DAO the creation of a new booking fails because id client is missing" duration="7"/>
    <testCase name="Test suite DAO the creation of a new booking fails because state is missing" duration="2"/>
    <testCase name="Test suite DAO the creation of a new booking is done" duration="102"/>
    <testCase name="Test suite DAO the creation of a new client fails because email is missing" duration="327"/>
    <testCase name="Test suite DAO the creation of a new client fails because name is missing" duration="107"/>
    <testCase name="Test suite DAO the creation of a new client fails because surname is missing" duration="157"/>
    <testCase name="Test suite DAO the creation of a new client fails because password is missing" duration="2"/>
    <testCase name="Test suite DAO the creation of a new client is done" duration="188"/>
    <testCase name="Test suite DAO get client return false because no email provided" duration="175"/>
    <testCase name="Test suite DAO get client return false because no user with that email exists" duration="2"/>
    <testCase name="Test suite DAO get client return false because wrong password" duration="295"/>
    <testCase name="Test suite DAO get client return success" duration="270"/>
    <testCase name="Test suite DAO get client return -1 because no email provided" duration="4"/>
    <testCase name="Test suite DAO get client return -1 because no user with that email exists" duration="3"/>
    <testCase name="Test suite DAO get client return success" duration="3"/>
    <testCase name="Test suite DAO get client return success" duration="3"/>
    <testCase name="Test suite DAO get clients preparation return success" duration="3"/>
    <testCase name="Test suite DAO get categories return success" duration="2"/>
    <testCase name="Test suite DAO get client by id return false because no user with that id exists" duration="2"/>
    <testCase name="Test suite DAO get client by id return success" duration="1"/>
    <testCase name="Test suite DAO get products expected by farmer id return empty array because no farmer with that id exists" duration="2"/>
    <testCase name="Test suite DAO get products expected by farmer return success" duration="2"/>
    <testCase name="Test suite DAO get farmer return false because no email provided" duration="2"/>
    <testCase name="Test suite DAO get farmer return false because no user with that email exists" duration="2"/>
    <testCase name="Test suite DAO get farmer return false because wrong psw" duration="113"/>
    <testCase name="Test suite DAO get farmer return success" duration="105"/>
    <testCase name="Test suite DAO get farmer by id return false because no farmer with that id exists" duration="4"/>
    <testCase name="Test suite DAO get farmer by id return a farmer" duration="3"/>
    <testCase name="Test suite DAO get shop employee return false because no email provided" duration="3"/>
    <testCase name="Test suite DAO get shop employee return false because no user with that email exists" duration="3"/>
    <testCase name="Test suite DAO get shop employee return false because wrong psw" duration="110"/>
    <testCase name="Test suite DAO get shop employee return success" duration="117"/>
    <testCase name="Test suite DAO get shop employee by id return false because no shop employee with that id exists" duration="699"/>
    <testCase name="Test suite DAO get shop employee by id return a shop employee" duration="2"/>
    <testCase name="Test suite DAO get warehouse worker by id return false because no shop worker with that id exists" duration="1"/>
    <testCase name="Test suite DAO get shop employee by id return a warehouse worker" duration="1"/>
    <testCase name="Test suite DAO get warehouse worker return false because no email provided" duration="2"/>
    <testCase name="Test suite DAO get warehouse worker return false because no user with that email exists" duration="2"/>
    <testCase name="Test suite DAO get warehouse worker return false because wrong psw" duration="111"/>
    <testCase name="Test suite DAO get warehouse worker return success" duration="698"/>
    <testCase name="get all products success" duration="18">
      <failure message="Error: expect(received).resolves.toEqual(expected) // deep equality"><![CDATA[Error: expect(received).resolves.toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 1

@@ -3,10 +3,10 @@
      "category": "Fruit",
      "farmer_email": "antonio.bianchi@mail.it",
      "id": 1,
      "name": "Mele",
      "price": 14,
-     "qty": 10,
+     "qty": 12,
      "size": 1,
      "unit_of_measure": "kg",
    },
  ]
    at Object.toEqual (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\node_modules\expect\build\index.js:242:22)
    at Object.<anonymous> (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\dao.test.js:363:48)
    at Promise.then.completed (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\utils.js:390:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\utils.js:315:10)
    at _callCircusTest (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:218:40)
    at _runTest (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:155:3)
    at _runTestsForDescribeBlock (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:66:9)
    at run (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\run.js:25:3)
    at runAndTransformResultsToJestFormat (C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:167:21)]]></failure>
    </testCase>
    <testCase name="get all all CONFIRMED products for a particular farmer success" duration="38"/>
    <testCase name="get all bookings success" duration="4"/>
    <testCase name="get all bookings modes in preparation success" duration="2"/>
    <testCase name="get all the records from BOOKING_MODE table WHERE delivery = 0 and state = NEW" duration="225"/>
    <testCase name="get all bookings for a client success" duration="3"/>
    <testCase name="get all bookings for a non-existing client success" duration="1"/>
    <testCase name="the creation of a new booking mode success" duration="111"/>
    <testCase name="updating the wallet failed bacause client was not found" duration="4"/>
    <testCase name="updating the wallet failed bacause client id was not provided" duration="247"/>
    <testCase name="update of wallet balance was successfull" duration="105"/>
    <testCase name="Creation of wallet with balance= 0.0 was successfull" duration="102"/>
    <testCase name="Creation of wallet fails,id 1 already exists" duration="2"/>
    <testCase name="Edit the state of a booking with a valid request" duration="2"/>
    <testCase name="create a row in the booking product table" duration="96"/>
    <testCase name="get all bookings with pendingcancelation state" duration="4"/>
    <testCase name="Insert a new Product expected without a field category" duration="2"/>
    <testCase name="INSERT into Product_WEEK by receiving a product confirmed by farmer with state = CONFIRMED success" duration="107"/>
    <testCase name="edit state of a product receiving an array with id-state" duration="3"/>
    <testCase name="increment qty of a product success" duration="2"/>
    <testCase name="delete a product with a given id success" duration="2"/>
    <testCase name="get all acks with NEW state success" duration="225"/>
    <testCase name="the creation of ack success" duration="122"/>
    <testCase name="get all bookings for a particular client with the booked state " duration="3"/>
    <testCase name="GET all the product associated to a particular booking" duration="4"/>
  </file>
  <file path="C:\Users\dadix\Desktop\scuola\magistrale\sofEngII\SPG3\SoftEngII-P08-SPG\server\serverIntegration.test.js">
    <testCase name="Test suite Integration Server Post booking fail create a new booking fails due to idClient = 0" duration="132"/>
    <testCase name="Test suite Integration Server Post booking fail create a new booking fails due to idClient = -1" duration="11"/>
    <testCase name="Test suite Integration Server Post booking success should create a new booking" duration="162"/>
    <testCase name="Test suite Integration Server Post booking mode success should create a new booking mode" duration="303"/>
    <testCase name="Test suite Integration Server updating booking mode status success should update a booking mode status to PREPERATION" duration="204"/>
    <testCase name="Test suite Integration Server Post new client fail create a new client fails due to invalid email" duration="97"/>
    <testCase name="Test suite Integration Server Post new client fail create a new client fails due to invalid name" duration="12"/>
    <testCase name="Test suite Integration Server Post new client fail create a new client fails due to invalid surname" duration="7"/>
    <testCase name="Test suite Integration Server Post new client fail create a new client fails due to invalid password" duration="7"/>
    <testCase name="Test suite Integration Server Post new client success create a new client success" duration="330"/>
    <testCase name="Test suite Integration Server Get a wallet fail send a invalid id of client" duration="347"/>
    <testCase name="Test suite Integration Server Put a qty of a product send a invalid qty" duration="16"/>
    <testCase name="Test suite Integration Server Put a qty of a product send a invalid id product" duration="12"/>
    <testCase name="Test suite Integration Server increment product qty send an invalid qty" duration="11"/>
    <testCase name="Test suite Integration Server increment product qty send an invalid id product" duration="12"/>
    <testCase name="Test suite Integration Server increment product qty send a valid request body" duration="107"/>
    <testCase name="Test suite Integration Server delete a product send an invalid product id" duration="99"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products success" duration="100"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong category id" duration="110"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong price" duration="5"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong farmer id" duration="5"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong quantity" duration="5"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong quantity" duration="6"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong unit of measure" duration="7"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products success" duration="362"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong category id" duration="7"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong price" duration="5"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong farmer id" duration="5"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong quantity" duration="5"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong quantity" duration="10"/>
    <testCase name="Test suite Integration Server insert a product POST /api/farmers/:farmerid/products fail for wrong unit of measure" duration="5"/>
    <testCase name="Test suite Integration Server delete a product send a valid product id" duration="1612"/>
    <testCase name="Test suite Integration Server Put a row in the table BOOKING_PRODUCTS send a invalid Booking id" duration="14"/>
    <testCase name="Test suite Integration Server Put a row in the table BOOKING_PRODUCTS send a invalid product id" duration="15"/>
    <testCase name="Test suite Integration Server Put a row in the table BOOKING_PRODUCTS send a invalid qty" duration="8"/>
    <testCase name="Test suite Integration Server Client Session success send a valid user" duration="117"/>
    <testCase name="Test suite Integration Server Client Session fails send a wrong psw" duration="103"/>
    <testCase name="Test suite Integration Server Get client by email success send a valid email" duration="7"/>
    <testCase name="Test suite Integration Server Get client by email fails don&apos;t send an email" duration="6"/>
    <testCase name="Test suite Integration Server Get client by email fails send a wrong email" duration="7"/>
    <testCase name="Test suite Integration Server Get clients success ask the list of clients" duration="9"/>
    <testCase name="Test suite Integration Server Get clients preparation success ask the list of clients with products in preparation" duration="7"/>
    <testCase name="Test suite Integration Server Get categories success ask the list of categories" duration="9"/>
    <testCase name="Test suite Integration Server Farmer Session success send a valid user" duration="117"/>
    <testCase name="Test suite Integration Server Farmer Session fails send a wrong psw" duration="118"/>
    <testCase name="Test suite Integration Server Shop Employee Session success send a valid user" duration="112"/>
    <testCase name="Test suite Integration Server Shop Employee Session fails send a wrong psw" duration="102"/>
    <testCase name="Test suite Integration Server Warehouse worker Session success send a valid user" duration="107"/>
    <testCase name="Test suite Integration Server Warehouse worker Session fails send a wrong psw" duration="103"/>
    <testCase name="Test suite Integration Server get all products success test get api/products endpoint" duration="7"/>
    <testCase name="Test suite Integration Server get all CONFIRMED products for a particular farmer success test //GET /api/products/farmers/:id success" duration="9"/>
    <testCase name="Test suite Integration Server get all CONFIRMED products for a particular farmer success test //GET /api/products/farmers/:id fail" duration="6"/>
    <testCase name="Test suite Integration Server get all products expected by farmer id success test get /api/farmers/:farmerid/products_expected endpoint fail" duration="5"/>
    <testCase name="Test suite Integration Server get all products expected by farmer id success test get /api/farmers/:farmerid/products_expected endpoint" duration="7"/>
    <testCase name="Test suite Integration Server get all confirmed products expected by farmer id success test get /api/products/farmers/1 endpoint" duration="6"/>
    <testCase name="Test suite Integration Server get all bookings success test get api/bookings endpoint" duration="8"/>
    <testCase name="Test suite Integration Server Get all the bookings from BOOKING_MODE with delivery = 0 and state = PREPARATION test GET /api/bookingModesPreparation" duration="9"/>
    <testCase name="Test suite Integration Server Get all the records from BOOKING_MODE table WHERE delivery = 0 and state = NEW test /api/bookingModesNew/pickup" duration="7"/>
    <testCase name="Test suite Integration Server get all bookings for a client success test get api/bookings/clients/1 endpoint" duration="6"/>
    <testCase name="Test suite Integration Server get all bookings for a non-existing client success test get api/bookings/clients/100 endpoint" duration="5"/>
    <testCase name="Test suite Integration Server update wallet balance fails send a negative balance amount" duration="6"/>
    <testCase name="Test suite Integration Server update wallet balance fails send a client id which does not exist" duration="6"/>
    <testCase name="Test suite Integration Server update wallet balance fails  do not send a client id " duration="10"/>
    <testCase name="Test suite Integration Server update wallet balance success send a valid body" duration="85"/>
    <testCase name="Test suite Integration Server edit the state of a booking send a invalid id booking" duration="8"/>
    <testCase name="Test suite Integration Server edit the state of a booking send a valid body" duration="7"/>
    <testCase name="Test suite Integration Server get all bookings with PENDINGCANCELATION state test /api/bookingsPendingCancelation endpoint" duration="6"/>
    <testCase name="Test suite Integration Server post a vector of product expected test with a no valid body, without a name field" duration="9"/>
    <testCase name="Test suite Integration Server Post ack success should create a new ack" duration="102"/>
    <testCase name="Test suite Integration Server get acks with state NEW success should retrieve a list of acks with state NEW" duration="165"/>
    <testCase name="Test suite Integration Server Put products with new state right put with all right fields" duration="12"/>
    <testCase name="Test suite Integration Server Put products with new state wrong put with a element without id field" duration="11"/>
    <testCase name="Test suite Integration Server Put products with new state wrong put with a invalid id" duration="11"/>
    <testCase name="Test suite Integration Server get all bookings of a client with the booked state get with a valid id" duration="6"/>
    <testCase name="Test suite Integration Server get all bookings of a client with the booked state get with a invalid id" duration="4"/>
    <testCase name="Test suite Integration Server get all products of a particular booking get with a valid id" duration="9"/>
    <testCase name="Test suite Integration Server get all products of a particular booking get with a invalid id" duration="5"/>
  </file>
</testExecutions>